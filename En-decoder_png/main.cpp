#include "PNGeditor.h"
#include "BitConvert.h"

#include <iostream>

void work_program(const char* filepath, std::string text);

int main()
{
	char filepath_0[]{ "png_files\\test_1.png" };
	char filepath_1[]{ "png_files\\art.png" };
	char filepath_2[]{ "png_files\\art - Copy.png" };

	std::string text_0 { "Preparing food\nJack was hungry.He walked to the kitchen.He got out some eggs.He took out some oil.He placed a skillet on the stove.Next, he turned on the heat.He poured the oil into the skillet.He cracked the eggs into a bowl.He stirred the eggs.Then, he poured them into the hot skillet.He waited while the eggs cooked.They cooked for two minutes.He heard them cooking.They popped in the oil.\n Next, Jack put the eggs on a plate.He placed the plate on the dining room table.Jack loved looking at his eggs.They looked pretty on the white plate.He sat down in the large wooden chair.He thought about the day ahead.He ate the eggs with a spoon.They were good.\n He washed the plate with dishwashing soap.Then, he washed the pan.He got a sponge damp.Finally, he wiped down the table.Next, Jack watched TV.  " };
	std::string text_1 { "I. Introduction\n This file describes how to use and modify the PNG reference library(known as libpng) for your own use.There are five sections to this file: introduction, structures, reading, writing, and modification and configuration notes for various special platforms.In addition to this file, example.c is a good starting point for using the library, as it is heavily commented and should include everything most people will need.We assume that libpng is already installed; see the INSTALL file for instructions on how to install libpng.\nLibpng was written as a companion to the PNG specification, as a way of reducing the amount of time and effort it takes to support the PNG file format in application programs.\nThe PNG - 1.2 specification is available at < http://www.libpng.org/pub/png> and at <ftp://ftp.uu.net/graphics/png/documents/>.\nThe PNG - 1.0 specification is available as RFC 2083 < ftp ://ftp.uu.net/graphics/png/documents/> and as a W3C Recommendation <http://www.w3.org/TR/REC.png.html>. Some additional chunks are described in the special-purpose public chunks documents at <ftp://ftp.uu.net/graphics/png/documents/>.\nOther information about PNG, and the latest version of libpng, can be found at the PNG home page, < http ://www.libpng.org/pub/png/> and at <ftp://ftp.uu.net/graphics/png/>.\nMost users will not have to modify the library significantly; advanced users may want to modify it more.All attempts were made to make it as complete as possible, while keeping the code easy to understand.Currently, this library only supports C.Support for other languages is being considered.\nLibpng has been designed to handle multiple sessions at one time, to be easily modifiable, to be portable to the vast majority of machines(ANSI, K & R, 16 - , 32 - , and 64 - bit) available, and to be easy to use.The ultimate goal of libpng is to promote the acceptance of the PNG file format in whatever way possible.While there is still work to be done(see the TODO file), libpng should cover the majority of the needs of its users.\nLibpng uses zlib for its compression and decompression of PNG files.Further information about zlib, and the latest version of zlib, can be found at the zlib home page, < http://www.info-zip.org/pub/infozip/zlib/>. The zlib compression utility is a general purpose utility that is useful for more than PNG files, and can be used without libpng. See the documentation delivered with zlib for more details. You can usually find the source files for the zlib utility wherever you find the libpng source files.\nLibpng is thread safe, provided the threads are using different instances of the structures.Each thread should have its own png_struct and png_info instances, and thus its own image.Libpng does not protect itself against two threads using the same instance of a structure.Note : thread safety may be defeated by use of some of the MMX assembler code in pnggccrd.c, which is only compiled when the user defines PNG_THREAD_UNSAFE_OK.I. Introduction\n This file describes how to use and modify the PNG reference library(known as libpng) for your own use.There are five sections to this file: introduction, structures, reading, writing, and modification and configuration notes for various special platforms.In addition to this file, example.c is a good starting point for using the library, as it is heavily commented and should include everything most people will need.We assume that libpng is already installed; see the INSTALL file for instructions on how to install libpng.\nLibpng was written as a companion to the PNG specification, as a way of reducing the amount of time and effort it takes to support the PNG file format in application programs.\nThe PNG - 1.2 specification is available at < http://www.libpng.org/pub/png> and at <ftp://ftp.uu.net/graphics/png/documents/>.\nThe PNG - 1.0 specification is available as RFC 2083 < ftp ://ftp.uu.net/graphics/png/documents/> and as a W3C Recommendation <http://www.w3.org/TR/REC.png.html>. Some additional chunks are described in the special-purpose public chunks documents at <ftp://ftp.uu.net/graphics/png/documents/>.\nOther information about PNG, and the latest version of libpng, can be found at the PNG home page, < http ://www.libpng.org/pub/png/> and at <ftp://ftp.uu.net/graphics/png/>.\nMost users will not have to modify the library significantly; advanced users may want to modify it more.All attempts were made to make it as complete as possible, while keeping the code easy to understand.Currently, this library only supports C.Support for other languages is being considered.\nLibpng has been designed to handle multiple sessions at one time, to be easily modifiable, to be portable to the vast majority of machines(ANSI, K & R, 16 - , 32 - , and 64 - bit) available, and to be easy to use.The ultimate goal of libpng is to promote the acceptance of the PNG file format in whatever way possible.While there is still work to be done(see the TODO file), libpng should cover the majority of the needs of its users.\nLibpng uses zlib for its compression and decompression of PNG files.Further information about zlib, and the latest version of zlib, can be found at the zlib home page, < http://www.info-zip.org/pub/infozip/zlib/>. The zlib compression utility is a general purpose utility that is useful for more than PNG files, and can be used without libpng. See the documentation delivered with zlib for more details. You can usually find the source files for the zlib utility wherever you find the libpng source files.\nLibpng is thread safe, provided the threads are using different instances of the structures.Each thread should have its own png_struct and png_info instances, and thus its own image.Libpng does not protect itself against two threads using the same instance of a structure.Note : thread safety may be defeated by use of some of the MMX assembler code in pnggccrd.c, which is only compiled when the user defines PNG_THREAD_UNSAFE_OKI. Introduction\n This file describes how to use and modify the PNG reference library(known as libpng) for your own use.There are five sections to this file: introduction, structures, reading, writing, and modification and configuration notes for various special platforms.In addition to this file, example.c is a good starting point for using the library, as it is heavily commented and should include everything most people will need.We assume that libpng is already installed; see the INSTALL file for instructions on how to install libpng.\nLibpng was written as a companion to the PNG specification, as a way of reducing the amount of time and effort it takes to support the PNG file format in application programs.\nThe PNG - 1.2 specification is available at < http://www.libpng.org/pub/png> and at <ftp://ftp.uu.net/graphics/png/documents/>.\nThe PNG - 1.0 specification is available as RFC 2083 < ftp ://ftp.uu.net/graphics/png/documents/> and as a W3C Recommendation <http://www.w3.org/TR/REC.png.html>. Some additional chunks are described in the special-purpose public chunks documents at <ftp://ftp.uu.net/graphics/png/documents/>.\nOther information about PNG, and the latest version of libpng, can be found at the PNG home page, < http ://www.libpng.org/pub/png/> and at <ftp://ftp.uu.net/graphics/png/>.\nMost users will not have to modify the library significantly; advanced users may want to modify it more.All attempts were made to make it as complete as possible, while keeping the code easy to understand.Currently, this library only supports C.Support for other languages is being considered.\nLibpng has been designed to handle multiple sessions at one time, to be easily modifiable, to be portable to the vast majority of machines(ANSI, K & R, 16 - , 32 - , and 64 - bit) available, and to be easy to use.The ultimate goal of libpng is to promote the acceptance of the PNG file format in whatever way possible.While there is still work to be done(see the TODO file), libpng should cover the majority of the needs of its users.\nLibpng uses zlib for its compression and decompression of PNG files.Further information about zlib, and the latest version of zlib, can be found at the zlib home page, < http://www.info-zip.org/pub/infozip/zlib/>. The zlib compression utility is a general purpose utility that is useful for more than PNG files, and can be used without libpng. See the documentation delivered with zlib for more details. You can usually find the source files for the zlib utility wherever you find the libpng source files.\nLibpng is thread safe, provided the threads are using different instances of the structures.Each thread should have its own png_struct and png_info instances, and thus its own image.Libpng does not protect itself against two threads using the same instance of a structure.Note : thread safety may be defeated by use of some of the MMX assembler code in pnggccrd.c, which is only compiled when the user defines PNG_THREAD_UNSAFE_OK" };

	work_program(filepath_0, text_0);

	std::cout << "Ok\n";
	std::cin.get();
	return 0;
}

void work_program(const char* filepath, std::string text)
{
	try
	{
		BitConvert converter;
		PNGeditor image;

		image.read_png(filepath);
		image.encode_png(converter.string_convert(text));
	
		image.read_png(filepath);
		std::cout << converter.bits_convert(image.decode_png()) << std::endl;

	}
	catch (std::invalid_argument &e) {
		std::cerr << "Exception! " << e.what() << std::endl;
	}
	catch (std::logic_error &e) {
		std::cerr << "Exception! " << e.what() << std::endl;
	}
}